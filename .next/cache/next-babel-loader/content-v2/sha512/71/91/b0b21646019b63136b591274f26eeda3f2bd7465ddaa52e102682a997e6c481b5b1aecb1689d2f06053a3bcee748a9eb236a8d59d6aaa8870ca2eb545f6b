{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jordan.kimsey\\\\OneDrive - Accenture\\\\Desktop\\\\code\\\\next-meetup-app\\\\pages\\\\index.js\";\nimport MeetupList from '../components/meetups/MeetupList';\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} //pros\n//excutes first during build process, not excute on client side\n//allows us to remove useeffect and usestate\n// sets props then return everything, great for SEO to have everything loaded into app\n//fetch data from an API or read files from filesystem\n//must return object and usually set props properity\n//optional for what we call inside props object\n//can only be called in pages\n//cons\n//could be outdated data, generated during build process\n//if we have more meetups then we wouldnt see new ones created\n//solution\n//we can pass in revalidate to rebuild site to fetch current data every __ seconds on server\n//faster allows for caching on cdn instead of regenerating everytime\n//this code isnt run on client so we can write server code here to call our own api without having to fetch outside\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage; //Alternative to getStaticProps(), not best choice in this case\n//does not run during build process but instead always on server after deployment\n//runs for every request\n//ideal if you need access to req, res and data updates multiple times per second\n// export async function getServerSideProps(context) {\n//   //optional prop accessible called context\n//   //have access to req and res of requests that can be used for the server side props or auth and cookies\n//   //dont return res object but props object instead\n//   const req = context.req;\n//   const res = context.res;\n//   //fetch data from API or filesystem\n//   //only runs on server\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     }\n//   };\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/jordan.kimsey/OneDrive - Accenture/Desktop/code/next-meetup-app/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;;AAEA,OAAOA,UAAP,MAAuB,kCAAvB;;AAqBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;KAzBSF,Q;;AA4CT,eAAeA,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nimport MeetupList from '../components/meetups/MeetupList';\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: 'm1',\r\n    title: 'First meetup',\r\n    image:\r\n      'https://images.unsplash.com/photo-1522083165195-3424ed129620?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=997&q=80',\r\n    address: '12345 Brooklyn st New York, New York',\r\n    description: 'This is our first meet up',\r\n  },\r\n  {\r\n    id: 'm2',\r\n    title: 'Second meetup',\r\n    image:\r\n      'https://images.unsplash.com/photo-1517209806898-2be0a0caf519?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=997&q=80',\r\n    address: '12345 Brooklyn st New York, New York',\r\n    description: 'This is our second meet up',\r\n  },\r\n];\r\n\r\nfunction HomePage(props) {\r\n  return (\r\n    <>\r\n      <MeetupList meetups={props.meetups} />\r\n    </>\r\n  );\r\n}\r\n\r\n//pros\r\n//excutes first during build process, not excute on client side\r\n//allows us to remove useeffect and usestate\r\n// sets props then return everything, great for SEO to have everything loaded into app\r\n//fetch data from an API or read files from filesystem\r\n//must return object and usually set props properity\r\n//optional for what we call inside props object\r\n//can only be called in pages\r\n\r\n//cons\r\n//could be outdated data, generated during build process\r\n//if we have more meetups then we wouldnt see new ones created\r\n\r\n//solution\r\n//we can pass in revalidate to rebuild site to fetch current data every __ seconds on server\r\n//faster allows for caching on cdn instead of regenerating everytime\r\n\r\n//this code isnt run on client so we can write server code here to call our own api without having to fetch outside\r\nexport async function getStaticProps() {\r\n  //fetch data from our API\r\n  MongoClient.connect();\r\n  const client = await MongoClient.connect(\r\n    'mongodb+srv://jordan1234:jordan1234@cluster0.otme2.mongodb.net/meetups?retryWrites=true&w=majority'\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection('meetups');\r\n\r\n  \r\n  return {\r\n    props: {\r\n      meetups: DUMMY_MEETUPS,\r\n    },\r\n    revalidate: 10,\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n\r\n//Alternative to getStaticProps(), not best choice in this case\r\n//does not run during build process but instead always on server after deployment\r\n//runs for every request\r\n//ideal if you need access to req, res and data updates multiple times per second\r\n// export async function getServerSideProps(context) {\r\n//   //optional prop accessible called context\r\n//   //have access to req and res of requests that can be used for the server side props or auth and cookies\r\n//   //dont return res object but props object instead\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   //fetch data from API or filesystem\r\n//   //only runs on server\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS\r\n//     }\r\n//   };\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}